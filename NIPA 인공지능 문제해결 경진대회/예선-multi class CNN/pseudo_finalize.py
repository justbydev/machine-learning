# -*- coding: utf-8 -*-
"""Pseudo_Finalize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bnxOz-vM9FOm_624SXI7GkeGt6GDgzi-
"""

import os
from google.colab import drive

drive.mount('./MyDrive', force_remount=True)

cd MyDrive/My Drive/NIPA/2020 하반기

from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing.image import img_to_array
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.callbacks import ReduceLROnPlateau
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.layers import Conv2D, Flatten, Dense, Activation, BatchNormalization, MaxPooling2D, Dropout, GlobalAveragePooling2D
from tensorflow.keras import backend as K
from tensorflow.keras.applications import InceptionResNetV2, MobileNet

import pandas as pd
import numpy as np

IMAGE_WIDTH=255
IMAGE_HEIGHT=255
IMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)
IMAGE_CHANNELS=3
BATCH_SIZE=32
EPOCHS=25

# tsv 파일을 읽습니다.
colnames=['filenames', 'plant_label', 'disease_label']
train_df = pd.read_csv("./data1/train/train.tsv",sep='\t',names=colnames, header=None)
test_df = pd.read_csv("./data1/test/test.tsv",sep='\t' ,header=None)
train_pseudo_df = pd.read_csv("./data1/new1.tsv", sep='\t', header=None)

train_df['clas'] = train_df[['plant_label', 'disease_label']].apply(tuple, axis=1)
train_df = train_df.drop('plant_label', 1)
train_df = train_df.drop('disease_label', 1)
train_df['category']=-1
train_df.head()

train_pseudo_df

train_pseudo_df = pd.DataFrame(np.asarray(train_pseudo_df), columns=['filenames','plant_label','disease_label'])

train_pseudo_df['clas'] = train_pseudo_df[['plant_label', 'disease_label']].apply(tuple, axis=1)
train_pseudo_df = train_pseudo_df.drop('plant_label', 1)
train_pseudo_df = train_pseudo_df.drop('disease_label', 1)
train_pseudo_df['category']=-1
train_pseudo_df.head()

for i in range(train_pseudo_df.shape[0]):
    nw_clas=train_pseudo_df.loc[i, 'clas']
    if nw_clas==(3, 5):
        train_pseudo_df.loc[i, 'category']=0
    elif nw_clas==(3, 20):
        train_pseudo_df.loc[i, 'category']=1
    elif nw_clas==(4, 2):
        train_pseudo_df.loc[i, 'category']=2
    elif nw_clas==(4, 7):
        train_pseudo_df.loc[i, 'category']=3
    elif nw_clas==(4, 11):
        train_pseudo_df.loc[i, 'category']=4
    elif nw_clas==(5, 8):
        train_pseudo_df.loc[i, 'category']=5
    elif nw_clas==(7, 1):
        train_pseudo_df.loc[i, 'category']=6
    elif nw_clas==(7, 20):
        train_pseudo_df.loc[i, 'category']=7
    elif nw_clas==(8, 6):
        train_pseudo_df.loc[i, 'category']=8
    elif nw_clas==(8, 9):
        train_pseudo_df.loc[i, 'category']=9
    elif nw_clas==(10, 20):
        train_pseudo_df.loc[i, 'category']=10
    elif nw_clas==(11, 14):
        train_pseudo_df.loc[i, 'category']=11
    elif nw_clas==(13, 1):
        train_pseudo_df.loc[i, 'category']=12
    elif nw_clas==(13, 6):
        train_pseudo_df.loc[i, 'category']=13
    elif nw_clas==(13, 9):
        train_pseudo_df.loc[i, 'category']=14
    elif nw_clas==(13, 15):
        train_pseudo_df.loc[i, 'category']=15
    elif nw_clas==(13, 16):
        train_pseudo_df.loc[i, 'category']=16
    elif nw_clas==(13, 17):
        train_pseudo_df.loc[i, 'category']=17
    elif nw_clas==(13, 18):
        train_pseudo_df.loc[i, 'category']=18
    elif nw_clas==(13, 20):
        train_pseudo_df.loc[i, 'category']=19

train_pseudo_df

for i in range(train_df.shape[0]):
    nw_clas=train_df.loc[i, 'clas']
    if nw_clas==(3, 5):
        train_df.loc[i, 'category']=0
    elif nw_clas==(3, 20):
        train_df.loc[i, 'category']=1
    elif nw_clas==(4, 2):
        train_df.loc[i, 'category']=2
    elif nw_clas==(4, 7):
        train_df.loc[i, 'category']=3
    elif nw_clas==(4, 11):
        train_df.loc[i, 'category']=4
    elif nw_clas==(5, 8):
        train_df.loc[i, 'category']=5
    elif nw_clas==(7, 1):
        train_df.loc[i, 'category']=6
    elif nw_clas==(7, 20):
        train_df.loc[i, 'category']=7
    elif nw_clas==(8, 6):
        train_df.loc[i, 'category']=8
    elif nw_clas==(8, 9):
        train_df.loc[i, 'category']=9
    elif nw_clas==(10, 20):
        train_df.loc[i, 'category']=10
    elif nw_clas==(11, 14):
        train_df.loc[i, 'category']=11
    elif nw_clas==(13, 1):
        train_df.loc[i, 'category']=12
    elif nw_clas==(13, 6):
        train_df.loc[i, 'category']=13
    elif nw_clas==(13, 9):
        train_df.loc[i, 'category']=14
    elif nw_clas==(13, 15):
        train_df.loc[i, 'category']=15
    elif nw_clas==(13, 16):
        train_df.loc[i, 'category']=16
    elif nw_clas==(13, 17):
        train_df.loc[i, 'category']=17
    elif nw_clas==(13, 18):
        train_df.loc[i, 'category']=18
    elif nw_clas==(13, 20):
        train_df.loc[i, 'category']=19

print(train_df)

import keras
cat_label=pd.DataFrame(keras.utils.to_categorical(train_df['category'], 20)).astype('int64')
train_df=pd.concat([train_df, cat_label], axis=1)
train_df

cat_label=pd.DataFrame(keras.utils.to_categorical(train_pseudo_df['category'], 20)).astype('int64')
train_pseudo_df=pd.concat([train_pseudo_df, cat_label], axis=1)
train_pseudo_df

train_df, valid_df = train_test_split(train_df, test_size = 0.15, random_state = 3)

total_train = train_df.shape[0]
total_valid = valid_df.shape[0]

train_pseudo_df

columns=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
train_datagen = ImageDataGenerator(rescale=1./255)
train_gen = train_datagen.flow_from_dataframe(train_df,
                                              directory="data1/train",
                                              batch_size = BATCH_SIZE,
                                              x_col = 'filenames',
                                              y_col = columns,
                                              class_mode='raw',
                                             )

train_pseudo_gen = train_datagen.flow_from_dataframe(train_pseudo_df,
                                              directory="data1/test",
                                              batch_size = BATCH_SIZE,
                                              x_col = 'filenames',
                                              y_col = columns,
                                              class_mode='raw',
                                             )


validation_datagen = ImageDataGenerator(rescale=1./255)
valid_gen = validation_datagen.flow_from_dataframe(
    valid_df, 
    directory="data1/train",
    x_col = 'filenames',
    y_col=columns,
    class_mode='raw',
    batch_size=BATCH_SIZE,
)

def recall_m(y_true, y_pred):
        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))
        recall = true_positives / (possible_positives + K.epsilon())
        return recall

def precision_m(y_true, y_pred):
        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))
        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))
        precision = true_positives / (predicted_positives + K.epsilon())
        return precision

def f1_m(y_true, y_pred):
    precision = precision_m(y_true, y_pred)
    recall = recall_m(y_true, y_pred)
    return 2*((precision*recall)/(precision+recall+K.epsilon()))
# def fscore(y_true, y_pred):
#     y_true, y_pred = np.array(y_true), np.array(y_pred)
#     y_true = y_true.reshape(1, -1)[0]
#     y_pred = y_pred.reshape(1, -1)[0]
#     remove_NAs = y_true >= 0
#     y_true = np.where(y_true[remove_NAs] >= 0.1, 1, 0)
#     y_pred = np.where(y_pred[remove_NAs] >= 0.1, 1, 0)
#     return(f1_score(y_true, y_pred))
# def fscore_keras(y_true, y_pred):
#     score = tf.py_function(func=fscore, inp=[y_true, y_pred], Tout=tf.float32, name='fscore_keras')
#     return score



def create_model():
    mobileNetModel = MobileNet(weights='imagenet', include_top=False)
    model=Sequential()
    model.add(mobileNetModel)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(20, activation='softmax', kernel_initializer='he_normal'))
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc', f1_m])

    return model

model = create_model()

learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', 
                                            patience=2, 
                                            verbose=1, 
                                            factor=0.5, 
                                            min_lr=0.00001)
callbacks = [learning_rate_reduction]

history = model.fit_generator(train_gen,
                    epochs = EPOCHS,
                    validation_data = valid_gen,
                    validation_steps=total_valid//BATCH_SIZE,
                    steps_per_epoch=total_train//BATCH_SIZE,
                    callbacks=callbacks
                             )

history2 = model.fit_generator(train_pseudo_gen,
                    epochs = EPOCHS,
                    validation_data = valid_gen,
                    # validation_steps=total_valid//BATCH_SIZE,
                    # steps_per_epoch=total_train//BATCH_SIZE,
                    callbacks=callbacks
                             )

history3 = model.fit_generator(valid_gen,
                    epochs = EPOCHS,
                    # steps_per_epoch=total_train//BATCH_SIZE,
                    callbacks=callbacks
                             )

history2.history



model.save('Pseudo-Finalize')

test_df = pd.read_csv("data1/test/test.tsv",sep='\t' , names=['filenames'], header=None)
test_datagen = ImageDataGenerator(rescale=1./255)
test_gen = test_datagen.flow_from_dataframe(test_df,
                                              directory="data1/test",
                                              batch_size = BATCH_SIZE,
                                              x_col = 'filenames',
                                              shuffle = False,
                                              y_col = None,
                                              class_mode=None,
                                             )

predict=model.predict_generator(test_gen)

predict

df=pd.DataFrame(data=predict, columns=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                                      12, 13, 14, 15, 16, 17, 18, 19])

df

test_df['category']=df[columns].idxmax(axis=1)

test_df['plant']=-1
test_df['disease']=-1
test_df

for i in range(test_df.shape[0]):
    now_cat=test_df.loc[i, 'category']
    if now_cat==0:
        test_df.loc[i, 'plant']=3
        test_df.loc[i, 'disease']=5
    elif now_cat==1:
        test_df.loc[i, 'plant']=3
        test_df.loc[i, 'disease']=20
    elif now_cat==2:
        test_df.loc[i, 'plant']=4
        test_df.loc[i, 'disease']=2
    elif now_cat==3:
        test_df.loc[i, 'plant']=4
        test_df.loc[i, 'disease']=7
    elif now_cat==4:
        test_df.loc[i, 'plant']=4
        test_df.loc[i, 'disease']=11
    elif now_cat==5:
        test_df.loc[i, 'plant']=5
        test_df.loc[i, 'disease']=8
    elif now_cat==6:
        test_df.loc[i, 'plant']=7
        test_df.loc[i, 'disease']=1
    elif now_cat==7:
        test_df.loc[i, 'plant']=7
        test_df.loc[i, 'disease']=20
    elif now_cat==8:
        test_df.loc[i, 'plant']=8
        test_df.loc[i, 'disease']=6
    elif now_cat==9:
        test_df.loc[i, 'plant']=8
        test_df.loc[i, 'disease']=9
    elif now_cat==10:
        test_df.loc[i, 'plant']=10
        test_df.loc[i, 'disease']=20
    elif now_cat==11:
        test_df.loc[i, 'plant']=11
        test_df.loc[i, 'disease']=14
    elif now_cat==12:
        test_df.loc[i, 'plant']=13
        test_df.loc[i, 'disease']=1
    elif now_cat==13:
        test_df.loc[i, 'plant']=13
        test_df.loc[i, 'disease']=6
    elif now_cat==14:
        test_df.loc[i, 'plant']=13
        test_df.loc[i, 'disease']=9
    elif now_cat==15:
        test_df.loc[i, 'plant']=13
        test_df.loc[i, 'disease']=15
    elif now_cat==16:
        test_df.loc[i, 'plant']=13
        test_df.loc[i, 'disease']=16
    elif now_cat==17:
        test_df.loc[i, 'plant']=13
        test_df.loc[i, 'disease']=17
    elif now_cat==18:
        test_df.loc[i, 'plant']=13
        test_df.loc[i, 'disease']=18
    elif now_cat==19:
        test_df.loc[i, 'plant']=13
        test_df.loc[i, 'disease']=20
test_df=test_df.drop(['category'], axis=1)
test_df

tsv=test_df.to_csv('submission_f.tsv', index=False, header=None, sep='\t')





# import pandas as pd
# import numpy as np
# df = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),
#                    'B': 'one one two three two two one three'.split(),
#                    'C': np.arange(8), 'D': np.arange(8) * 2})

# df

# print(df.loc[df['C'] > 3, 'A'].to_list())

import numpy as np

new_val_df = test_df[['filenames']]

print(new_val_df)

print(df.columns)

newDf = df.rename(columns={0: "a", 1: "b",2: "c", 3: "d",4: "e", 5: "f",6: "g", 7: "h",8: "i", 9: "j",10: "k", 11: "l",12: "m", 13: "n",14: "o", 15: "p",16: "q", 17: "r",18: "s", 19: "t",})

new_val_df = pd.concat([new_val_df,newDf],axis=1)

new_val_df

new_val_df1 = new_val_df.loc[(new_val_df['a'] > 0.99) | (new_val_df['b'] > 0.99) |
(new_val_df['c'] > 0.99) | (new_val_df['d'] > 0.99) |
(new_val_df['e'] > 0.99) | (new_val_df['f'] > 0.99) |
(new_val_df['g'] > 0.99) | (new_val_df['h'] > 0.99) |
(new_val_df['i'] > 0.99) | (new_val_df['j'] > 0.99) |
(new_val_df['k'] > 0.99) | (new_val_df['l'] > 0.99) |
(new_val_df['m'] > 0.99) | (new_val_df['n'] > 0.99) |
(new_val_df['o'] > 0.99) | (new_val_df['p'] > 0.99) |
(new_val_df['q'] > 0.99) | (new_val_df['r'] > 0.99) |
(new_val_df['s'] > 0.99) | (new_val_df['t'] > 0.99) , 'filenames'].to_list()

new_val_df = new_val_df[new_val_df['filenames'].isin(new_val_df1)]

new_val_df

over_file_list_a = new_val_df.loc[new_val_df['a'] > 0.99  , 'filenames'].to_list()
over_file_list_b = new_val_df.loc[new_val_df['b'] > 0.99  , 'filenames'].to_list()
over_file_list_c = new_val_df.loc[new_val_df['c'] > 0.99  , 'filenames'].to_list()
over_file_list_d = new_val_df.loc[new_val_df['d'] > 0.99  , 'filenames'].to_list()
over_file_list_e = new_val_df.loc[new_val_df['e'] > 0.99  , 'filenames'].to_list()

over_file_list_f = new_val_df.loc[new_val_df['f'] > 0.99  , 'filenames'].to_list()
over_file_list_g = new_val_df.loc[new_val_df['g'] > 0.99  , 'filenames'].to_list()
over_file_list_h = new_val_df.loc[new_val_df['h'] > 0.99  , 'filenames'].to_list()
over_file_list_i = new_val_df.loc[new_val_df['i'] > 0.99  , 'filenames'].to_list()
over_file_list_j = new_val_df.loc[new_val_df['j'] > 0.99  , 'filenames'].to_list()

over_file_list_k = new_val_df.loc[new_val_df['k'] > 0.99  , 'filenames'].to_list()
over_file_list_l = new_val_df.loc[new_val_df['l'] > 0.99  , 'filenames'].to_list()
over_file_list_m = new_val_df.loc[new_val_df['m'] > 0.99  , 'filenames'].to_list()
over_file_list_n = new_val_df.loc[new_val_df['n'] > 0.99  , 'filenames'].to_list()
over_file_list_o = new_val_df.loc[new_val_df['o'] > 0.99  , 'filenames'].to_list()

over_file_list_p = new_val_df.loc[new_val_df['p'] > 0.99  , 'filenames'].to_list()
over_file_list_q = new_val_df.loc[new_val_df['q'] > 0.99  , 'filenames'].to_list()
over_file_list_r = new_val_df.loc[new_val_df['r'] > 0.99  , 'filenames'].to_list()
over_file_list_s = new_val_df.loc[new_val_df['s'] > 0.99  , 'filenames'].to_list()
over_file_list_t = new_val_df.loc[new_val_df['t'] > 0.99  , 'filenames'].to_list()
print(len(over_file_list_a)+len(over_file_list_b)+len(over_file_list_c)+len(over_file_list_d)+len(over_file_list_e)+len(over_file_list_f)+len(over_file_list_g)+len(over_file_list_h)+len(over_file_list_i)+len(over_file_list_j)+len(over_file_list_k)+len(over_file_list_l)+len(over_file_list_m)+len(over_file_list_n)+len(over_file_list_o)+len(over_file_list_p)+len(over_file_list_q)+len(over_file_list_r)+len(over_file_list_s)+len(over_file_list_t))

df_a = pd.DataFrame(over_file_list_a)
df_b = pd.DataFrame(over_file_list_b)
df_c = pd.DataFrame(over_file_list_c)
df_d = pd.DataFrame(over_file_list_d)
df_e = pd.DataFrame(over_file_list_e)

df_f = pd.DataFrame(over_file_list_f)
df_g = pd.DataFrame(over_file_list_g)
df_h = pd.DataFrame(over_file_list_h)
df_i = pd.DataFrame(over_file_list_i)
df_j = pd.DataFrame(over_file_list_j)

df_k = pd.DataFrame(over_file_list_k)
df_l = pd.DataFrame(over_file_list_l)
df_m = pd.DataFrame(over_file_list_m)
df_n = pd.DataFrame(over_file_list_n)
df_o = pd.DataFrame(over_file_list_o)

df_p = pd.DataFrame(over_file_list_p)
df_q = pd.DataFrame(over_file_list_q)
df_r = pd.DataFrame(over_file_list_r)
df_s = pd.DataFrame(over_file_list_s)
df_t = pd.DataFrame(over_file_list_t)

df_a['plant'] = 3
df_b['plant'] = 3
df_c['plant'] = 4
df_d['plant'] = 4
df_e['plant'] = 4
df_f['plant'] = 5
df_g['plant'] = 7
df_h['plant'] = 7
df_i['plant'] = 8
df_j['plant'] = 8
df_k['plant'] = 10
df_l['plant'] = 11
df_m['plant'] = 13
df_n['plant'] = 13
df_o['plant'] = 13
df_p['plant'] = 13
df_q['plant'] = 13
df_r['plant'] = 13
df_s['plant'] = 13
df_t['plant'] = 13

df_a['disease'] = 5
df_b['disease'] = 20
df_c['disease'] = 2
df_d['disease'] = 7
df_e['disease'] = 11
df_f['disease'] = 8
df_g['disease'] = 1
df_h['disease'] = 20
df_i['disease'] = 6
df_j['disease'] = 9
df_k['disease'] = 20
df_l['disease'] = 14
df_m['disease'] = 1
df_n['disease'] = 6
df_o['disease'] = 9
df_p['disease'] = 15
df_q['disease'] = 16
df_r['disease'] = 17
df_s['disease'] = 18
df_t['disease'] = 20

print(df_a)

dfs = [df_a,df_b,df_c,df_d,df_e,df_f,df_g,df_h,df_i,df_j,df_k,df_l,df_m,df_n,df_o,df_p,df_q,df_r,df_s,df_t]

new_file_df = pd.concat( dfs,axis=0,ignore_index=True)

print(new_file_df)

new_file_df

new_file_df.to_csv('new1.tsv', index=False, header=None, sep='\t')

