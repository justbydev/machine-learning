# -*- coding: utf-8 -*-
"""multi_variable_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10vgryCbI-Cm4YTnGuH8Jdt4jAAsDMhic

Import Modules
"""

import numpy as np

"""Data"""

x1=np.array([73, 93, 89, 96, 73, 53, 69, 47, 87, 79, 69, 70, 93, 79, 70, 93, 78, 81, 88, 78])
x1=x1.reshape((20, 1))
x2=np.array([80, 88, 91, 98, 66, 46, 74, 56, 79, 70, 70, 65, 95, 80, 73, 89, 75, 90, 92, 83])
x2=x2.reshape((20, 1))
x3=np.array([75, 93, 90, 100, 70, 55, 77, 60, 90, 88, 73, 74, 91, 73, 78, 96, 68, 93, 86, 77])
x3=x3.reshape((20, 1))
y=np.array([152, 185, 180, 196, 142, 101, 149, 115, 175, 164, 141, 141, 184, 152, 148, 192, 147, 183, 177, 159])
y=y.reshape((20, 1))
X=np.concatenate([x1, x2], axis=1)
X=np.concatenate([X, x3], axis=1)

"""Setting Hyperparameter"""

learning_rate=0.00001
epoch=20000
weight=np.random.rand(3, 1)
bias=np.random.rand(1, 1)

"""Make cost function(MSE)"""

def error_function(w, b):
  y_pred=X.dot(w)+b
  return np.sum((y_pred-y)**2)/len(y)

"""Predict"""

def predict(test, w, b):
  return test.dot(w)+b

"""Derivative of Error(using numerical derivative)"""

def numerical_derivative(f, w, b):
  h=1e-4
  grad=np.zeros(w.shape[0]+1)
  grad=grad.reshape((w.shape[0]+1, 1))
  for i in range(w.shape[0]):
    tmp=w[i, 0]
    w[i, 0]=float(w[i, 0])+h
    fx1=error_function(w, b)
    w[i, 0]=tmp

    tmp=w[i, 0]
    w[i, 0]=float(w[i, 0])-h
    fx2=error_function(w, b)
    w[i, 0]=tmp
    grad[i, 0]=(fx1-fx2)/(2*h)
  
  fx1=error_function(w, float(b[0, 0])+h)
  fx2=error_function(w, float(b[0, 0])-h)
  grad[w.shape[0], 0]=(fx1-fx2)/(2*h)
  return grad

"""Training"""

for i in range(epoch):
  grad=numerical_derivative(error_function, weight, bias)
  w_grad=grad[:weight.shape[0]]
  b_grad=grad[weight.shape[0]]
  weight=weight-learning_rate*w_grad
  bias=bias-learning_rate*b_grad
  if i%2000==0:
    print('Epoch=', i, ' error_value=', error_function(weight, bias), "W=", weight, "b=", bias)

"""predict value for (100, 90, 80)"""

test_data=np.array([100, 90, 80])
print(predict(test_data, weight, bias))