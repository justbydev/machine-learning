# -*- coding: utf-8 -*-
"""XOR_USING_KERAS_DNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-ZrZlLN7Sl6eYHdXNWeLkH_KdHRAyJS5

Import modules
"""

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.layers.core import Dense, Activation

"""Tuning parameters"""

epoch=15000
learning_rate=0.1

"""Data"""

x=np.array([[-1, -1], [-1, 1], [1, -1], [1, 1]])
y=np.array([[0], [1], [1], [0]]) #XOR gate

fig, ax=plt.subplots()
for i in range(4):
  if y[i][0]==0:
    ax.plot(x[i][0], x[i][1], marker='o', color='blue')
  else:
    ax.plot(x[i][0], x[i][1], marker='o', color='red')

"""Creating the DNN Model(MLP)"""

model=Sequential() #layer 쌓기 위한 설정

"""Adding layers to the model"""

#XOR gate는 1개의 input layer, 1개의 hidden layer, 1개의 output layer 로 구성
model.add(Dense(2, activation='sigmoid', input_dim=2))
#Dense는 fully connected layer를 뜻하며 (출력 node의 수, activation function, 입력 데이터 dim)
model.add(Dense(1, activation='sigmoid'))
#input에 대한 것은 처음 input layer에서만 설정하면 됨

"""Optimizer"""

optimizer=keras.optimizers.SGD(lr=learning_rate)

"""Compile the model"""

#cost function, optimizer 등을 정하고 학습하기 위한 설정
model.compile(loss='mse', optimizer=optimizer, metrics=['accuracy'])

"""Training the model"""

#fit()을 통해서 training
training=model.fit(x, y, epochs=epoch, verbose=0)
#fit(input data, output label, epoch, 과정 보기 여부)
for i in range(0, epoch, 500):
  print('Epoch', i, ':', training.history['loss'][i])

"""Prediction the model"""

y_pred=model.predict(x)
#predict(input data) 을 통해서 training 통해 얻어진 training value 얻음

print('Input')
print(x)
print('Label')
print(y)
print('Output')
print(y_pred)